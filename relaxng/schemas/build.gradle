defaultTasks 'schemas', 'test'

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.5.0'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.4.0'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

project.ext.dbrel="DocBook " + dbver
project.ext.asmrel="DocBook Assembly " + dbver
project.ext.xirel="DocBook XInclude " + dbver
project.ext.sdbrel="Simplified DocBook " + dbver
project.ext.formrel="DocBook Forms " + dbver
project.ext.itsrel="DocBook ITS " + dbver
project.ext.pubrel="DocBook Publishers " + dbver + "-1"
project.ext.slirel="DocBook Slides " + dbver + "-1"
project.ext.slifullrel="DocBook Slides Full " + dbver + "-1"
project.ext.webrel="DocBook Wesite " + dbver + "-1"
project.ext.webfullrel="DocBook Wesite Full " + dbver + "-1"

task docbook_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook', exclude: "test/**")
  inputs.file mkschema
  outputs.dir "build/docbook"
  outputs.file "docbook.rnc"

  pipeline mkschema
  option("schema","docbook")
  option("release",dbrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/docbook")
  }
}

task docbook_sch(dependsOn: docbook_rnc, type: XMLCalabashTask) {
  inputs.file "docbook.rng"
  outputs.file "docbook.sch"
  pipeline mkschematron
  input("source", "docbook.rng")
  output("result", "docbook.sch")
}

task any_docbook_rng(dependsOn: docbook_rnc, type: XMLCalabashTask) {
  inputs.file "docbook.rng"
  inputs.file "../tools/all-patterns.xsl"
  outputs.file "build/docbook/any.docbook.rng"

  pipeline "../tools/xslt.xpl"
  input("source", "docbook.rng")
  input("stylesheet", "../tools/all-patterns.xsl")
  output("result", "build/docbook/any.docbook.rng")
}

task any_docbook_rnc(dependsOn: any_docbook_rng, type: XMLCalabashTask) {
  inputs.file "build/docbook/any.docbook.rng"
  inputs.file "../tools/rng-to-rnc.xpl"
  outputs.file "build/docbook/any.docbook.rnc"

  pipeline "../tools/rng-to-rnc.xpl"
  option("schema", "build/docbook/any.docbook")
}

task assembly_rnc(dependsOn: any_docbook_rnc, type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'assembly').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/assembly"
  outputs.file "assembly.rnc"

  pipeline mkschema
  option("schema","assembly")
  option("release",asmrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/assembly")
  }
}

task assembly_sch(dependsOn: assembly_rnc, type: XMLCalabashTask) {
  inputs.file "assembly.rng"
  outputs.file "assembly.sch"
  pipeline mkschematron
  input("source", "assembly.rng")
  output("result", "assembly.sch")
}

task docbookxi_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'docbookxi').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/docbookxi"
  outputs.file "docbookxi.rnc"

  pipeline mkschema
  option("schema","docbookxi")
  option("release",xirel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/docbookxi")
  }
}

task docbookxi_sch(dependsOn: docbookxi_rnc, type: XMLCalabashTask) {
  inputs.file "docbookxi.rng"
  outputs.file "docbookxi.sch"
  pipeline mkschematron
  input("source", "docbookxi.rng")
  output("result", "docbookxi.sch")
}

task defguide_rnd(dependsOn: ['docbook_rnc', 'assembly_rnc', 'any_docbook_rnc'],
                  type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'defguide').exclude("test/**")
  inputs.file mkdoc
  outputs.dir "build/defguide"
  outputs.file "defguide.rnd"

  pipeline mkdoc
  option("schema","defguide")

  doFirst {
    mkdir("build/defguide")
  }
}

task sdocbook_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'sdocbook').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/sdocbook"
  outputs.file "sdocbook.rnc"

  pipeline mkschema
  option("schema","sdocbook")
  option("release",sdbrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/sdocbook")
  }
}

task sdocbook_sch(dependsOn: sdocbook_rnc, type: XMLCalabashTask) {
  inputs.file "sdocbook.rng"
  outputs.file "sdocbook.sch"
  pipeline mkschematron
  input("source", "sdocbook.rng")
  output("result", "sdocbook.sch")
}

task sdocbook_rnd(dependsOn: ['sdocbook_rnc'], type: XMLCalabashTask) {
  inputs.file mkdoc
  outputs.file "sdocbook.rnd"

  pipeline mkdoc
  option("schema","sdocbook")
}

task dbforms_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'dbforms').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/dbforms"
  outputs.file "dbforms.rnc"

  pipeline mkschema
  option("schema","dbforms")
  option("release",formrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/dbforms")
  }
}

task dbforms_sch(dependsOn: dbforms_rnc, type: XMLCalabashTask) {
  inputs.file "dbforms.rng"
  outputs.file "dbforms.sch"
  pipeline mkschematron
  input("source", "dbforms.rng")
  output("result", "dbforms.sch")
}

task dbits_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'dbits').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/dbits"
  outputs.file "dbits.rnc"

  pipeline mkschema
  option("schema","dbits")
  option("release",itsrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/dbits")
  }
}

task dbits_sch(dependsOn: dbits_rnc, type: XMLCalabashTask) {
  inputs.file "dbits.rng"
  outputs.file "dbits.sch"
  pipeline mkschematron
  input("source", "dbits.rng")
  output("result", "dbits.sch")
}

task publishers_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'publishers').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/publishers"
  outputs.file "publishers.rnc"

  pipeline mkschema
  option("schema","publishers")
  option("release",pubrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/publishers")
  }
}

task publishers_sch(dependsOn: publishers_rnc, type: XMLCalabashTask) {
  inputs.file "publishers.rng"
  outputs.file "publishers.sch"
  pipeline mkschematron
  input("source", "publishers.rng")
  output("result", "publishers.sch")
}

task publishers_rnd(dependsOn: ['publishers_rnc'], type: XMLCalabashTask) {
  inputs.file mkdoc
  outputs.file "publishers.rnd"

  pipeline mkdoc
  option("schema","publishers")
}

task slides_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'slides').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/slides"
  outputs.file "slides.rnc"

  pipeline mkschema
  option("schema","slides")
  option("release",slirel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/slides")
  }
}

task slides_sch(dependsOn: slides_rnc, type: XMLCalabashTask) {
  inputs.file "slides.rng"
  outputs.file "slides.sch"
  pipeline mkschematron
  input("source", "slides.rng")
  output("result", "slides.sch")
}

task slides_rnd(dependsOn: ['slides_rnc'], type: XMLCalabashTask) {
  inputs.file mkdoc
  outputs.file "slides.rnd"

  pipeline mkdoc
  option("schema","slides")
}

task slides_full_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'slides-full').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/slides-full"
  outputs.file "slides-full.rnc"

  pipeline mkschema
  option("schema","slides-full")
  option("release",slifullrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/slides-full")
  }
}

task slides_full_sch(dependsOn: slides_full_rnc, type: XMLCalabashTask) {
  inputs.file "slides-full.rng"
  outputs.file "slides-full.sch"
  pipeline mkschematron
  input("source", "slides-full.rng")
  output("result", "slides-full.sch")
}

task website_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'website').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/website"
  outputs.file "website.rnc"

  pipeline mkschema
  option("schema","website")
  option("release",webrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/website")
  }
}

task website_sch(dependsOn: website_rnc, type: XMLCalabashTask) {
  inputs.file "website.rng"
  outputs.file "website.sch"
  pipeline mkschematron
  input("source", "website.rng")
  output("result", "website.sch")
}

task website_rnd(dependsOn: ['website_rnc'], type: XMLCalabashTask) {
  inputs.file mkdoc
  outputs.file "website.rnd"

  pipeline mkdoc
  option("schema","website")
}

task website_full_rnc(type: XMLCalabashTask) {
  inputs.files fileTree(dir: 'docbook').exclude("test/**")
  inputs.files fileTree(dir: 'website-full').exclude("test/**")
  inputs.file mkschema
  outputs.dir "build/website-full"
  outputs.file "website-full.rnc"

  pipeline mkschema
  option("schema","website-full")
  option("release",webfullrel)
  option("remove-schematron",removesch)

  doFirst {
    mkdir("build/website-full")
  }
}

task website_full_sch(dependsOn: website_full_rnc, type: XMLCalabashTask) {
  inputs.file "website-full.rng"
  outputs.file "website-full.sch"
  pipeline mkschematron
  input("source", "website-full.rng")
  output("result", "website-full.sch")
}

task schemas(dependsOn: ['assembly_rnc',
                         'assembly_sch',
                         'dbforms_rnc',
                         'dbforms_sch',
                         'dbits_rnc',
                         'dbits_sch',
                         'docbook_rnc',
                         'docbook_sch',
                         'docbookxi_rnc',
                         'docbookxi_sch',
                         'publishers_rnc',
                         'publishers_sch',
                         'sdocbook_rnc',
                         'sdocbook_sch',
                         'slides_full_rnc',
                         'slides_full_sch',
                         'slides_rnc',
                         'slides_sch',
                         'website_full_rnc',
                         'website_full_sch',
                         'website_rnc',
                         'website_sch']) {
  doLast {
    println("Generated schemas.")
  }
}

task docs(dependsOn: ['defguide_rnd',
                      'publishers_rnd',
                      'sdocbook_rnd',
                      'slides_rnd',
                      'website_rnd']) {
  doLast {
    println("Generated documentation.")
  }
}

task clean {
  doFirst {
    delete "build"
    delete fileTree(dir: '.').include("*.rnc")
    delete fileTree(dir: '.').include("*.rng")
    delete fileTree(dir: '.').include("*.rnd")
    delete fileTree(dir: '.').include("*.sch")
  }
}

// DocBook Tests

task createDocBookTestDirectories() {
  doFirst {
    mkdir("build")
    mkdir("build/test")
    mkdir("build/test/docbook")
    mkdir("build/test/docbook/pass")
    mkdir("build/test/docbook/fail")
  }
}

task positiveDocBookTests(dependsOn: ['docbook_sch',
                                      'createDocBookTestDirectories']) {
  // nothing to see here
}

task negativeDocBookTests(dependsOn: ['docbook_sch',
                                      'createDocBookTestDirectories']) {
  // nothing to see here
}

task testDocBook(dependsOn: ['positiveDocBookTests','negativeDocBookTests']) {
  // nothing to see here
}

Random random = new Random()
Boolean travis = (System.getenv("RUNNING_ON_TRAVIS") != null)
int threshold = 90

if (travis) {
  print("Skipping roughly " + threshold + "% of tests to avoid memory problems on Travis\n")
}

fileTree(dir: "docbook/test/pass").each { file ->
  if (!travis || random.nextInt(100) > threshold) {
    task "testDocBookPass_$file.name"(type: XMLCalabashTask) {
      input("source", "docbook/test/pass/$file.name")
      output("result", "build/test/docbook/pass/$file.name")
      option("schema", "docbook")
      pipeline "../tools/validate-pass.xpl"
    }
    positiveDocBookTests.dependsOn "testDocBookPass_$file.name"
  }
}

fileTree(dir: "docbook/test/fail").each { file ->
  if (!travis || random.nextInt(100) > threshold) {
    task "testDocBookFail_$file.name"(type: XMLCalabashTask) {
      input("source", "docbook/test/fail/$file.name")
      output("result", "build/test/docbook/fail/$file.name")
      option("schema", "docbook")
      pipeline "../tools/validate-fail.xpl"
    }
    negativeDocBookTests.dependsOn "testDocBookFail_$file.name"
  }
}

// Assembly Tests

task createAssemblyTestDirectories() {
  doFirst {
    mkdir("build/test/assembly/pass")
    mkdir("build/test/assembly/fail")
  }
}

task positiveAssemblyTests(dependsOn: ['assembly_sch',
                                       'createAssemblyTestDirectories']) {
  // nothing to see here
}

task negativeAssemblyTests(dependsOn: ['assembly_sch',
                                       'createAssemblyTestDirectories']) {
  // nothing to see here
}

task testAssembly(dependsOn: ['positiveAssemblyTests','negativeAssemblyTests']) {
  // nothing to see here
}

fileTree(dir: "assembly/test/pass").each { file ->
  task "testAssemblyPass_$file.name"(type: XMLCalabashTask) {
    input("source", "assembly/test/pass/$file.name")
    output("result", "build/test/assembly/pass/$file.name")
    option("schema", "assembly")
    pipeline "../tools/validate-pass.xpl"
  }
  positiveAssemblyTests.dependsOn "testAssemblyPass_$file.name"
}

fileTree(dir: "assembly/test/fail").each { file ->
  task "testAssemblyFail_$file.name"(type: XMLCalabashTask) {
    input("source", "assembly/test/fail/$file.name")
    output("result", "build/test/assembly/fail/$file.name")
    option("schema", "assembly")
    pipeline "../tools/validate-fail.xpl"
  }
  negativeAssemblyTests.dependsOn "testAssemblyFail_$file.name"
}

// Publishers Tests

task createPublishersTestDirectories() {
  doFirst {
    mkdir("build/test/publishers")
    mkdir("build/test/publishers/pass")
    mkdir("build/test/publishers/fail")
  }
}

task positivePublishersTests(dependsOn: ['publishers_sch',
                                         'createPublishersTestDirectories']) {
  // nothing to see here
}

task negativePublishersTests(dependsOn: ['publishers_sch',
                                         'createPublishersTestDirectories']) {
  // nothing to see here
}

task testPublishers(dependsOn: ['positivePublishersTests',
                                'negativePublishersTests']) {
  // nothing to see here
}

fileTree(dir: "publishers/test/pass").each { file ->
  task "testPublishersPass_$file.name"(type: XMLCalabashTask) {
    input("source", "publishers/test/pass/$file.name")
    output("result", "build/test/publishers/pass/$file.name")
    option("schema", "publishers")
    pipeline "../tools/validate-pass.xpl"
  }
  positivePublishersTests.dependsOn "testPublishersPass_$file.name"
}

fileTree(dir: "publishers/test/fail").each { file ->
  task "testPublishersFail_$file.name"(type: XMLCalabashTask) {
    input("source", "publishers/test/fail/$file.name")
    output("result", "build/test/publishers/fail/$file.name")
    option("schema", "publishers")
    pipeline "../tools/validate-fail.xpl"
  }
  negativePublishersTests.dependsOn "testPublishersFail_$file.name"
}

task test(dependsOn: ['testDocBook', 'testAssembly', 'testPublishers']) {
  // nothing to see here
}

// ============================================================

task distDocBook1(dependsOn: ['docbook_rnc','docbookxi_rnc',
                              'assembly_rnc','dbits_rnc'],
                  type: Copy) {
  from('.') {
    include 'docbook.rn*'
    include 'docbookxi.rn*'
    include 'assembly.rn*'
    include 'dbits.rn*'
  }
  into "build/dist/xml/${docbook_version}/rng"
  doFirst {
    mkdir("build/dist/xml/${docbook_version}/rng")
  }
}

task distDocBook2(dependsOn: ['docbook_sch','docbookxi_sch',
                              'assembly_sch','dbits_sch'],
                  type: Copy) {
  from('.') {
    include 'docbook.sch'
    include 'docbookxi.sch'
    include 'assembly.sch'
    include 'dbits.sch'
  }
  into "build/dist/xml/${docbook_version}/sch"
  doFirst {
    mkdir("build/dist/xml/${docbook_version}/sch")
  }
}

task distDocBook3(type: Copy) {
  from('../tools') {
    include 'db4-entities.pl'
    include 'db4-upgrade.xsl'
  }
  into "build/dist/xml/${docbook_version}/tools"
  doFirst {
    mkdir("build/dist/xml/${docbook_version}/tools")
  }
}

task distDocBook4(type: Copy) {
  from('docbook') {
    include 'docbook.nvdl'
  }
  into "build/dist/xml/${docbook_version}"
  doFirst {
    mkdir("build/dist/xml/${docbook_version}")
  }
}

task distDocBook5(type: XMLCalabashTask) {
  inputs.file "../tools/make-index.xpl"
  inputs.file "docbook/index.xhtml"
  outputs.file "build/dist/xml/${docbook_version}/index.html"

  pipeline "../tools/make-index.xpl"
  input("source", "docbook/index.xhtml")
  output("result", "build/dist/xml/${docbook_version}/index.html")
  option("version", "${docbook_version}")
  option("tdg", "https://docbook.org/tdg51/en/html/")
  option("tdgtitle", "DocBook 5.1: The Definitive Guide")
}

task distCatalog(type: XMLCalabashTask) {
  inputs.file "docbook/docbook-catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/xml/${docbook_version}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "docbook/docbook-catalog.xml")
  output("result", "build/dist/xml/${docbook_version}/catalog.xml")
  option("ROOT", "https://docbook.org/xml")
  option("ROOT2", "https://www.docbook.org/xml")
  option("VERSION", "${docbook_version}")
  doFirst {
    mkdir("build/dist/xml/${docbook_version}")
  }
}

task distDocBook(dependsOn: ['distDocBook1', 'distDocBook2',
                             'distDocBook3', 'distDocBook4',
                             'distDocBook5',
                             'distCatalog']) {
  // nop
}

// ============================================================

task distDocBookOASIS1(dependsOn: ['docbook_rnc','docbookxi_rnc',
                                   'assembly_rnc','dbits_rnc'],
                       type: Copy) {
  from('.') {
    include 'docbook.rn*'
    include 'docbookxi.rn*'
    include 'assembly.rn*'
    include 'dbits.rn*'
  }
  into "build/dist/docbook/docbook/${oasis_version}/${oasis_release}/rng"
  doFirst {
    mkdir("build/dist/docbook/docbook/${oasis_version}/${oasis_release}/rng")
  }
}

task distDocBookOASIS2(dependsOn: ['docbook_sch','docbookxi_sch',
                                   'assembly_sch','dbits_sch'],
                       type: Copy) {
  from('.') {
    include 'docbook.sch'
    include 'docbookxi.sch'
    include 'assembly.sch'
    include 'dbits.sch'
  }
  into "build/dist/docbook/docbook/${oasis_version}/${oasis_release}/sch"
  doFirst {
    mkdir("build/dist/docbook/docbook/${oasis_version}/${oasis_release}/sch")
  }
}

task distDocBookOASIS3(type: Copy) {
  from('../tools') {
    include 'db4-entities.pl'
    include 'db4-upgrade.xsl'
  }
  into "build/dist/docbook/docbook/${oasis_version}/${oasis_release}/tools"
  doFirst {
    mkdir("build/dist/docbook/docbook/${oasis_version}/${oasis_release}/tools")
  }
}

task distDocBookOASIS4(type: Copy) {
  from('docbook') {
    include 'docbook.nvdl'
  }
  into "build/dist/docbook/docbook/${oasis_version}/${oasis_release}"
  doFirst {
    mkdir("build/dist/docbook/docbook/${oasis_version}/${oasis_release}")
  }
}

task distCatalogOASIS(type: XMLCalabashTask) {
  inputs.file "docbook/oasis-catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/docbook/docbook/${oasis_version}/${oasis_release}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "docbook/oasis-catalog.xml")
  output("result", "build/dist/docbook/docbook/${oasis_version}/${oasis_release}/catalog.xml")
  option("ROOT", "https://docs.oasis-open.org/docbook/docbook")
  option("VERSION", "${oasis_version}")
  option("RELEASE", "${oasis_release}")
  doFirst {
    mkdir("build/dist/docbook/docbook/${oasis_version}/${oasis_release}")
  }
}

task distDocBookOASIS(dependsOn: ['distDocBookOASIS1', 'distDocBookOASIS2',
                                  'distDocBookOASIS3', 'distDocBookOASIS4',
                                  'distCatalogOASIS']) {
  // nop
}

// ============================================================

task distPub1(dependsOn: publishers_rnc, type: Copy) {
  from('.') {
    include 'publishers.rnc'
    include 'publishers.rng'
  }
  into "build/dist/xml/publishers/${publishers_version}/rng"
  doFirst {
    mkdir("build/dist/xml/publishers/${publishers_version}/rng")
  }
}

task distPub2(dependsOn: publishers_sch, type: Copy) {
  from('.') {
    include 'publishers.sch'
  }
  into "build/dist/xml/publishers/${publishers_version}/sch"
  doFirst {
    mkdir("build/dist/xml/publishers/${publishers_version}/sch")
  }
}

task distPub3(type: Copy) {
  from('publishers') {
    include 'publishers.nvdl'
  }
  into "build/dist/xml/publishers/${publishers_version}"
  doFirst {
    mkdir("build/dist/xml/publishers/${publishers_version}")
  }
}

task distPub4(type: XMLCalabashTask) {
  inputs.file "../tools/make-index.xpl"
  inputs.file "publishers/index.xhtml"
  outputs.file "build/dist/xml/publishers/${publishers_version}/index.html"

  pipeline "../tools/make-index.xpl"
  input("source", "publishers/index.xhtml")
  output("result", "build/dist/xml/publishers/${publishers_version}/index.html")
  option("version", "${publishers_version}")
  option("tdg", "https://docbook.org/tdg51/publishers/en/html/")
  option("tdgtitle", "DocBook Publishers 5.1: The Definitive Guide")
}

task distPubCatalog(type: XMLCalabashTask) {
  inputs.file "publishers/catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/xml/publishers/${publishers_version}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "publishers/catalog.xml")
  output("result", "build/dist/xml/publishers/${publishers_version}/catalog.xml")
  option("ROOT", "https://docbook.org/xml/publishers")
  option("ROOT2", "https://www.docbook.org/xml/publishers")
  option("VERSION", "${publishers_version}")
  doFirst {
    mkdir("build/dist/xml/publishers/${publishers_version}")
  }
}

task distPublishers(dependsOn: ['distPub1', 'distPub2', 'distPub3',
                                'distPub4',
                                'distPubCatalog']) {
  // nop
}

// ============================================================

task distSimple1(dependsOn: sdocbook_rnc, type: Copy) {
  from('.') {
    include 'sdocbook.rnc'
    include 'sdocbook.rng'
  }
  into "build/dist/xml/sdocbook/${sdocbook_version}/rng"
  doFirst {
    mkdir("build/dist/xml/sdocbook/${sdocbook_version}/rng")
  }
}

task distSimple2(dependsOn: sdocbook_sch, type: Copy) {
  from('.') {
    include 'sdocbook.sch'
  }
  into "build/dist/xml/sdocbook/${sdocbook_version}/sch"
  doFirst {
    mkdir("build/dist/xml/sdocbook/${sdocbook_version}/sch")
  }
}

task distSimple3(type: Copy) {
  from('sdocbook') {
    include 'sdocbook.nvdl'
  }
  into "build/dist/xml/sdocbook/${sdocbook_version}"
  doFirst {
    mkdir("build/dist/xml/sdocbook/${sdocbook_version}")
  }
}

task distSimple4(type: XMLCalabashTask) {
  inputs.file "../tools/make-index.xpl"
  inputs.file "sdocbook/index.xhtml"
  outputs.file "build/dist/xml/sdocbook/${sdocbook_version}/index.html"

  pipeline "../tools/make-index.xpl"
  input("source", "sdocbook/index.xhtml")
  output("result", "build/dist/xml/sdocbook/${sdocbook_version}/index.html")
  option("version", "${sdocbook_version}")
  option("tdg", "https://docbook.org/tdg51/sdocbook/en/html/")
  option("tdgtitle", "Simplified DocBook 5.1: The Definitive Guide")
}

task distSimpleCatalog(type: XMLCalabashTask) {
  inputs.file "sdocbook/catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/xml/sdocbook/${sdocbook_version}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "sdocbook/catalog.xml")
  output("result", "build/dist/xml/sdocbook/${sdocbook_version}/catalog.xml")
  option("ROOT", "https://docbook.org/xml/sdocbook")
  option("ROOT2", "https://www.docbook.org/xml/sdocbook")
  option("VERSION", "${sdocbook_version}")
  doFirst {
    mkdir("build/dist/xml/sdocbook/${sdocbook_version}")
  }
}

task distSimple(dependsOn: ['distSimple1', 'distSimple2', 'distSimple3',
                            'distSimple4',
                            'distSimpleCatalog']) {
  // nop
}

// ============================================================

task distSlides1(dependsOn: ['slides_rnc', 'slides_full_rnc'], type: Copy) {
  from('.') {
    include 'slides.rnc'
    include 'slides.rng'
    include 'slides-full.rnc'
    include 'slides-full.rng'
  }
  into "build/dist/xml/slides/${slides_version}/rng"
  doFirst {
    mkdir("build/dist/xml/slides/${slides_version}/rng")
  }
}

task distSlides2(dependsOn: ['slides_sch', 'slides_full_sch'], type: Copy) {
  from('.') {
    include 'slides.sch'
    include 'slides-full.sch'
  }
  into "build/dist/xml/slides/${slides_version}/sch"
  doFirst {
    mkdir("build/dist/xml/slides/${slides_version}/sch")
  }
}

task distSlides3(type: Copy) {
  from('slides') {
    include 'slides.nvdl'
  }
  into "build/dist/xml/slides/${slides_version}"
  doFirst {
    mkdir("build/dist/xml/slides/${slides_version}")
  }
}

task distSlides4(type: XMLCalabashTask) {
  inputs.file "../tools/make-index.xpl"
  inputs.file "slides/index.xhtml"
  outputs.file "build/dist/xml/slides/${slides_version}/index.html"

  pipeline "../tools/make-index.xpl"
  input("source", "slides/index.xhtml")
  output("result", "build/dist/xml/slides/${slides_version}/index.html")
  option("version", "${slides_version}")
  option("tdg", "https://docbook.org/tdg51/slides/en/html/")
  option("tdgtitle", "DocBook Slides 5.1: The Definitive Guide")
}

task distSlidesCatalog(type: XMLCalabashTask) {
  inputs.file "slides/catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/xml/slides/${slides_version}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "slides/catalog.xml")
  output("result", "build/dist/xml/slides/${slides_version}/catalog.xml")
  option("ROOT", "https://docbook.org/xml/slides")
  option("ROOT2", "https://www.docbook.org/xml/slides")
  option("VERSION", "${slides_version}")
  doFirst {
    mkdir("build/dist/xml/slides/${slides_version}")
  }
}

task distSlides(dependsOn: ['distSlides1', 'distSlides2', 'distSlides3',
                            'distSlides4',
                            'distSlidesCatalog']) {
  // nop
}

// ============================================================

task distWebsite1(dependsOn: ['website_rnc', 'website_full_rnc'], type: Copy) {
  from('.') {
    include 'website.rnc'
    include 'website.rng'
    include 'website-full.rnc'
    include 'website-full.rng'
  }
  into "build/dist/xml/website/${website_version}/rng"
  doFirst {
    mkdir("build/dist/xml/website/${website_version}/rng")
  }
}

task distWebsite2(dependsOn: ['website_sch', 'website_full_sch'], type: Copy) {
  from('.') {
    include 'website.sch'
    include 'website-full.sch'
  }
  into "build/dist/xml/website/${website_version}/sch"
  doFirst {
    mkdir("build/dist/xml/website/${website_version}/sch")
  }
}

task distWebsite3(type: Copy) {
  from('website') {
    include 'website.nvdl'
  }
  into "build/dist/xml/website/${website_version}"
  doFirst {
    mkdir("build/dist/xml/website/${website_version}")
  }
}

task distWebsite4(type: XMLCalabashTask) {
  inputs.file "../tools/make-index.xpl"
  inputs.file "website/index.xhtml"
  outputs.file "build/dist/xml/website/${website_version}/index.html"

  pipeline "../tools/make-index.xpl"
  input("source", "website/index.xhtml")
  output("result", "build/dist/xml/website/${website_version}/index.html")
  option("version", "${website_version}")
  option("tdg", "https://docbook.org/tdg51/website/en/html/")
  option("tdgtitle", "DocBook Website 5.1: The Definitive Guide")
}

task distWebsiteCatalog(type: XMLCalabashTask) {
  inputs.file "website/catalog.xml"
  inputs.file "../tools/catalog.xsl"
  outputs.file "build/dist/xml/website/${website_version}/catalog.xml"

  pipeline "../tools/catalog.xpl"
  input("source", "website/catalog.xml")
  output("result", "build/dist/xml/website/${website_version}/catalog.xml")
  option("ROOT", "https://docbook.org/xml/website")
  option("ROOT2", "https://www.docbook.org/xml/website")
  option("VERSION", "${website_version}")
  doFirst {
    mkdir("build/dist/xml/website/${website_version}")
  }
}

task distWebsite(dependsOn: ['distWebsite1', 'distWebsite2', 'distWebsite3',
                             'distWebsite4',
                             'distWebsiteCatalog']) {
  // nop
}

// ============================================================

task dist(dependsOn: ['schemas', 'test',
                      'distDocBook','distPublishers','distSimple',
                      'distSlides','distWebsite']) {
  // nop
}
